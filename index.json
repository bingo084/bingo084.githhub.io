[{"categories":["web"],"content":"WebP 是 Google 开发的一种光栅图形文件格式，旨在替代 JPEG、PNG 和 GIF 文件格式。它支持有损和无损压缩，以及动画和 Alpha 透明度。 ","date":"2024-04-15","objectID":"/posts/speed-up-with-webp/:0:0","tags":["webp"],"title":"使用 WebP 加速网站","uri":"/posts/speed-up-with-webp/"},{"categories":["web"],"content":"为什么要使用 WebP WebP 是一种现代图片格式，可为网络上的图片提供出色的无损和有损压缩。使用 WebP，网站站长和 Web 开发者可以创建更小、更丰富的图片，从而提高网页加载速度。 与 PNG 相比，WebP 无损图片的尺寸缩小了 26%。WebP 有损图片比采用等效 SSIM 质量指数的同等 JPEG 图片小 25-34%。 无损 WebP 支持透明度（也称为 Alpha 通道），但只需额外增加 22% 的字节。对于可以接受有损 RGB 压缩的情况，有损 WebP 也支持透明度，其文件大小通常比 PNG 小 3 倍。 动画 WebP 图片支持有损、无损和透明度，与 GIF 和 APNG 相比，此类图片可缩减大小。 ","date":"2024-04-15","objectID":"/posts/speed-up-with-webp/:1:0","tags":["webp"],"title":"使用 WebP 加速网站","uri":"/posts/speed-up-with-webp/"},{"categories":["web"],"content":"体验 WebP WebP - 图片格式的发展趋势 可以看到，在图片尺寸大幅下降的同时，图片质量并没有明显下降。这可以极大加速网站的加载，减小流量消耗，提升用户体验。 ","date":"2024-04-15","objectID":"/posts/speed-up-with-webp/:2:0","tags":["webp"],"title":"使用 WebP 加速网站","uri":"/posts/speed-up-with-webp/"},{"categories":["web"],"content":"使用 WebP 有许多在线网站可以将图片转换为 WebP 格式，也有离线转换工具。常见的离线转换工具有 Cwebp cwebp -q 50 -lossless picture.png -o picture_lossless.webp cwebp -q 70 picture_with_alpha.png -o picture_with_alpha.webp cwebp -sns 70 -f 50 -size 60000 picture.png -o picture.webp cwebp -o picture.webp -- ---picture.png ","date":"2024-04-15","objectID":"/posts/speed-up-with-webp/:3:0","tags":["webp"],"title":"使用 WebP 加速网站","uri":"/posts/speed-up-with-webp/"},{"categories":["web"],"content":"效果 我把博客中较大的封面图都转换成了 WebP 格式，使用 Google PageSpeed Insights 测试了一下。 优化前只有 69 分，优化后达到了 92 分。 ","date":"2024-04-15","objectID":"/posts/speed-up-with-webp/:4:0","tags":["webp"],"title":"使用 WebP 加速网站","uri":"/posts/speed-up-with-webp/"},{"categories":["config"],"content":"这篇文章记录了我在 Linux 下使用 vsftpd 配置 FTP 服务的过程。 ","date":"2024-02-10","objectID":"/posts/vsftpd/:0:0","tags":["ftp","linux"],"title":"配置 Linux 下的 FTP 服务","uri":"/posts/vsftpd/"},{"categories":["config"],"content":"安装 pacman -S vsftpd ","date":"2024-02-10","objectID":"/posts/vsftpd/:1:0","tags":["ftp","linux"],"title":"配置 Linux 下的 FTP 服务","uri":"/posts/vsftpd/"},{"categories":["config"],"content":"配置 vsftpd 的配置文件位于 /etc/vsftpd.conf，默认自带大量注释说明。下面挑一些需要修改的部分说明，更详细的说明参阅 vsftpd.conf(5) # 开启本地用户登录 local_enable=YES # 允许上传 write_enable=YES ","date":"2024-02-10","objectID":"/posts/vsftpd/:2:0","tags":["ftp","linux"],"title":"配置 Linux 下的 FTP 服务","uri":"/posts/vsftpd/"},{"categories":["config"],"content":"启动（并设置开机自启动） sudo systemctl enable --now vsftpd 注意 每次修改配置文件后都需要重启服务。 ","date":"2024-02-10","objectID":"/posts/vsftpd/:3:0","tags":["ftp","linux"],"title":"配置 Linux 下的 FTP 服务","uri":"/posts/vsftpd/"},{"categories":["config"],"content":"测试 ","date":"2024-02-10","objectID":"/posts/vsftpd/:4:0","tags":["ftp","linux"],"title":"配置 Linux 下的 FTP 服务","uri":"/posts/vsftpd/"},{"categories":["config"],"content":"安装 inetutils 包 pacman -S inetutils ","date":"2024-02-10","objectID":"/posts/vsftpd/:4:1","tags":["ftp","linux"],"title":"配置 Linux 下的 FTP 服务","uri":"/posts/vsftpd/"},{"categories":["config"],"content":"使用 ftp 命令测试 ftp localhost 根据提示输入正确的用户名和密码后即可登录 ~ \u003e ftp localhost Connected to localhost. 220 (vsFTPd 3.0.5) Name (localhost:bingo): 331 Please specify the password. Password: 230 Login successful. Remote system type is UNIX. Using binary mode to transfer files. ftp\u003e ls 200 PORT command successful. Consider using PASV. 150 Here comes the directory listing. drwxr-xr-x 2 1000 1000 4096 Jan 24 15:38 Desktop drwxr-xr-x 5 1000 1000 4096 Feb 10 06:37 Documents drwxr-xr-x 8 1000 1000 4096 Feb 10 13:52 Downloads drwxr-xr-x 2 1000 1000 4096 Jan 24 15:38 Music drwxr-xr-x 4 1000 1000 4096 Sep 27 13:40 Pictures drwxr-xr-x 2 1000 1000 4096 Jan 24 15:38 Public drwxr-xr-x 2 1000 1000 4096 Jan 24 15:38 Videos 226 Directory send OK. ftp\u003e 查看本机 ip，在局域网内的其他设备使用该 ip 即可访问。 ","date":"2024-02-10","objectID":"/posts/vsftpd/:4:2","tags":["ftp","linux"],"title":"配置 Linux 下的 FTP 服务","uri":"/posts/vsftpd/"},{"categories":["config"],"content":"参考 ArchWiki、vsftpd 配置文件 ","date":"2024-02-10","objectID":"/posts/vsftpd/:5:0","tags":["ftp","linux"],"title":"配置 Linux 下的 FTP 服务","uri":"/posts/vsftpd/"},{"categories":["config"],"content":"网上许多 Zsh 的配置教程都是使用 oh-my-zsh 来进行配置， 优点是配置起来简单，对新手友好， 缺点是太过臃肿，拖慢 Zsh 的启动速度。这篇文章记录了我不使用 oh-my-zsh 从零开始配置 Zsh 的过程。 ","date":"2023-12-09","objectID":"/posts/config-zsh/:0:0","tags":["zsh"],"title":"纯净配置 Zsh","uri":"/posts/config-zsh/"},{"categories":["config"],"content":"初始配置 使用 zsh 的新用户向导 zsh-newuser-install 进行初始配置。 技巧 如果是第一次安装 zsh，那么安装后在终端中运行 zsh 应该会自动启动新用户向导。 注意 确保你的终端尺寸至少为 72×15 大小，否则新用户向导 zsh-newuser-install 将无法运行。 autoload -Uz zsh-newuser-install zsh-newuser-install -f 运行后出现如下提示，我们依次开始配置： *** compinstall: main menu *** Note that hitting `q' in menus does not abort the set of changes from Please pick one of the following options: (1) Configure settings for history, i.e. command lines remembered and saved by the shell. (Recommended.) (2) Configure the new completion system. (Recommended.) (3) Configure how keys behave when editing command lines. (Recommended.) (4) Pick some of the more common shell options. These are simple \"on\" or \"off\" switches controlling the shell's features. (0) Exit, leaving the existing ~/.zshrc alone. (a) Abort all settings and start from scratch. Note this will overwrite any settings from zsh-newuser-install already in the startup file. It will not alter any of your other settings, however. (q) Quit and do nothing else. --- Type one of the keys in parentheses --- ","date":"2023-12-09","objectID":"/posts/config-zsh/:1:0","tags":["zsh"],"title":"纯净配置 Zsh","uri":"/posts/config-zsh/"},{"categories":["config"],"content":"配置历史记录 History configuration ===================== # (1) Number of lines of history kept within the shell. HISTSIZE=1000 (not yet saved) # (2) File where history is saved. HISTFILE=~/.histfile (not yet saved) # (3) Number of lines of history to save to $HISTFILE. SAVEHIST=1000 (not yet saved) # (0) Remember edits and return to main menu (does not save file yet) # (q) Abandon edits and return to main menu --- Type one of the keys in parentheses --- HISTSIZE 与 SAVEHIST 的区别 HISTSIZE：单次会话在内存中保存的最大历史记录（方向键 ⬆️ 查看）数量。 SAVEHIST：会话结束时在文件中保存的最大历史记录（从内存中保存）数量。 ","date":"2023-12-09","objectID":"/posts/config-zsh/:1:1","tags":["zsh"],"title":"纯净配置 Zsh","uri":"/posts/config-zsh/"},{"categories":["config"],"content":"配置新的补全系统 The new completion system (compsys) allows you to complete commands, arguments and special shell syntax such as variables. It provides completions for a wide range of commonly used commands in most cases simply by typing the TAB key. Documentation is in the zshcompsys manual page. If it is not turned on, only a few simple completions such as filenames are available but the time to start the shell is slightly shorter. You can: (1) Turn on completion with the default options. (2) Run the configuration tool (compinstall). You can also run this from the command line with the following commands: autoload -Uz compinstall compinstall if you don't want to configure completion now. (0) Don't turn on completion. --- Type one of the keys in parentheses --- 新的补全系统（compsys）允许你补全命令、参数和特殊的 shell 语法，例如变量。它提供了对大多数常用命令的补全，通常只需按 TAB 键即可。文档在 zshcompsys 手册页 中。如果没有打开，只有一些简单的补全，例如文件名是可用的，但启动 shell 的时间稍短。 ","date":"2023-12-09","objectID":"/posts/config-zsh/:1:2","tags":["zsh"],"title":"纯净配置 Zsh","uri":"/posts/config-zsh/"},{"categories":["config"],"content":"配置编辑键盘行为 Default editing configuration ============================= The keys in the shell's line editor can be made to behave either like Emacs or like Vi, two common Unix editors. If you have no experience of either, Emacs is recommended. If you don't pick one, the shell will try to guess based on the EDITOR environment variable. Usually it's better to pick one explicitly. # (1) Change default editing configuration bindkey -e (not yet saved) # (0) or (q) Return to main menu (no changes made yet) --- Type one of the keys in parentheses --- shell 的行编辑器中的键可以像 Emacs 或 Vi 一样运行。如果你对任何一个都没有经验，那么推荐使用 Emacs。如果你没有选择一个，shell 将尝试根据 EDITOR 环境变量来猜测。通常最好明确地选择一个。 ","date":"2023-12-09","objectID":"/posts/config-zsh/:1:3","tags":["zsh"],"title":"纯净配置 Zsh","uri":"/posts/config-zsh/"},{"categories":["config"],"content":"配置常用选项 Common shell options ==================== The following are some of the shell options that are most often used. The descriptions are very brief; if you would like more information, read the zshoptions manual page (type \"man zshoptions\"). # (1) Change directory given just path. unsetopt autocd (not yet saved) # (2) Use additional pattern matching features. setopt extendedglob (not yet saved) # (3) Unmatched patterns cause an error. setopt nomatch (not yet saved) # (4) Beep on errors. unsetopt beep (not yet saved) # (5) Immediately report changes in background job status. setopt notify (not yet saved) # (0) or (q) Return to main menu (no changes made yet) --- Type one of the keys in parentheses --- 常用的 shell 选项 autocd：直接通过路径更改目录 extendedglob：使用额外的模式匹配特性 nomatch：未匹配的模式导致错误 beep：错误时发出蜂鸣声 notify：立即报台作业状态的变化 更多信息请阅读 zshoptions 手册页 ","date":"2023-12-09","objectID":"/posts/config-zsh/:1:4","tags":["zsh"],"title":"纯净配置 Zsh","uri":"/posts/config-zsh/"},{"categories":["config"],"content":"保存配置 选择 0 保存配置 如果之前没有配置过 zsh，那么会自动创建 ~/.zshrc 文件。 如果之前已经配置过 zsh，那么会在 ~/.zshrc 文件中追加新的配置。 查看 ~/.zshrc 文件，可以看到刚才的配置已经被保存了。 # Lines configured by zsh-newuser-install HISTFILE=~/.zsh_history HISTSIZE=10000 SAVEHIST=10000 setopt extendedglob nomatch notify unsetopt autocd beep bindkey -e # End of lines configured by zsh-newuser-install # The following lines were added by compinstall zstyle :compinstall filename '/home/bingo/.zshrc' autoload -Uz compinit compinit # End of lines added by compinstall ","date":"2023-12-09","objectID":"/posts/config-zsh/:1:5","tags":["zsh"],"title":"纯净配置 Zsh","uri":"/posts/config-zsh/"},{"categories":["config"],"content":"配置主题 使用 Starship 配置 prompt。 ","date":"2023-12-09","objectID":"/posts/config-zsh/:2:0","tags":["zsh"],"title":"纯净配置 Zsh","uri":"/posts/config-zsh/"},{"categories":["config"],"content":"安装 Starship sudo pacman -S starship ","date":"2023-12-09","objectID":"/posts/config-zsh/:2:1","tags":["zsh"],"title":"纯净配置 Zsh","uri":"/posts/config-zsh/"},{"categories":["config"],"content":"启用 Starship echo 'eval \"$(starship init zsh)\"' \u003e\u003e~/.zshrc ","date":"2023-12-09","objectID":"/posts/config-zsh/:2:2","tags":["zsh"],"title":"纯净配置 Zsh","uri":"/posts/config-zsh/"},{"categories":["config"],"content":"配置 Starship ","date":"2023-12-09","objectID":"/posts/config-zsh/:2:3","tags":["zsh"],"title":"纯净配置 Zsh","uri":"/posts/config-zsh/"},{"categories":["config"],"content":"安装插件 ","date":"2023-12-09","objectID":"/posts/config-zsh/:3:0","tags":["zsh"],"title":"纯净配置 Zsh","uri":"/posts/config-zsh/"},{"categories":["config"],"content":"zsh-autosuggestions sudo pacman -S zsh-autosuggestions source /usr/share/zsh/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh brew install zsh-autosuggestions source $(brew --prefix)/share/zsh-autosuggestions/zsh-autosuggestions.zsh zsh-autosuggestions效果 # 先尝试从历史记录中查找建议，如果找不到，再从补全引擎中查找。 export ZSH_AUTOSUGGEST_STRATEGY=(match_prev_cmd completion) zsh-autosuggestions 提供了三种建议策略 history：从历史记录中选择最近的匹配。 completion：从补全列表中选择最近的匹配。 match_prev_cmd: 类似 history，但选择最近执行的命令的前一个历史项匹配的最近匹配。 ","date":"2023-12-09","objectID":"/posts/config-zsh/:3:1","tags":["zsh"],"title":"纯净配置 Zsh","uri":"/posts/config-zsh/"},{"categories":["config"],"content":"zsh-syntax-highlighting sudo pacman -S zsh-syntax-highlighting echo \"source /usr/share/zsh/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh\" \u003e\u003e${ZDOTDIR:-$HOME}/.zshrc brew install zsh-syntax-highlighting echo \"source $(brew --prefix)/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh\" \u003e\u003e${ZDOTDIR:-$HOME}/.zshrc zsh-syntax-highlighting效果 ","date":"2023-12-09","objectID":"/posts/config-zsh/:3:2","tags":["zsh"],"title":"纯净配置 Zsh","uri":"/posts/config-zsh/"},{"categories":["config"],"content":"配置别名、环境变量 最后根据自己的需要配置别名、环境变量等。 ","date":"2023-12-09","objectID":"/posts/config-zsh/:4:0","tags":["zsh"],"title":"纯净配置 Zsh","uri":"/posts/config-zsh/"}]